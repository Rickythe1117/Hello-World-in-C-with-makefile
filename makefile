######################################## NOTES #####################################################################################
#Common Argument for gcc compiler:
# "-c": Compile the source code files without linking them to create an object file
# "-o": Specify the name of the output file generated by the compiler or linker
# "-Wall": Enable all warning messages
# "-Wextra": Enable additional warning messages
# "-Werror": Treat warnings as errors
# "-g": Include debugging information in the compiled code
# "-O": Optimize the compiled code for speed or size (can be followed by a level, such as "-O1" or "-O2")
# "-std": Specify the language standard to use (e.g. "-std=c99" for C99)
# "-I": Specify the directory where header files are located
# "-L": Specify the directory where library files are located
# "-l": Link against a specific library (e.g. "-lm" for the math library)
# "-D": Define a preprocessor macro (e.g. "-DDEBUG" to define the macro "DEBUG")

#commonly used macros in Makefiles:
# "$@": The name of the target file.
# "$<": The name of the first prerequisite file.
# "$^": The names of all prerequisite files, separated by spaces and with duplicates removed.
# "$?": The names of all prerequisite files that are newer than the target file, separated by spaces and with duplicates removed.
# "$*": The stem of the target file (i.e. the part of the filename without the extension).
# "$(VARNAME)": The value of a variable named "VARNAME".
# "$(MAKE)": The name of the make program.
# "$(MAKECMDGOALS)": The list of targets specified on the command line.
# "$(MAKEFILE_LIST)": The list of all Makefiles being read, separated by spaces.
# "$(CURDIR)": The current directory.
# "$(wildcard pattern)": A list of filenames that match a file name pattern.
# "$(patsubst pattern,replacement,text)": A copy of "text" with all occurrences of "pattern" replaced with "replacement".
# "$(shell command)": The output of a shell command.

#sources: 
# https://www.gnu.org/software/make/manual/make.html#Overview 
# https://makefiletutorial.com 
# https://www.cs.colby.edu/maxwell/courses/tutorials/maketutor/

#####################################################################################################################################

# all: hello_world.c sub.c
# 	@echo Hello World
# 	@echo $@ #The name of the target file. 															output : all
# 	@echo $< The name of the first prerequisite file. 												output : hello_world.c
# 	@echo $? The names of all prerequisite files that are newer than the target file, separated by spaces and with duplicates removed.
#	@echo $^ The names of all prerequisite files, separated by spaces and with duplicates removed. 	output: hello_world.c sub.c
#	@echo $* The stem of the target file (i.e. the part of the filename without the extension). 	output : hello_world
.SILENT:

OUTPUT_PATH = out
OBJDIR = ${OUTPUT_PATH}/obj
BINDIR = ${OUTPUT_PATH}/bin

inc:= 	-Iinclude/ \
	  	-Iinclude_2/

src:= 	hello_world.c \
	  	sub_folder/sub.c \
		sub_folder_2/sub_2.c

CFLAGS = -Wall -Wextra ${inc}

OBJECT:=$(patsubst %.c,${OBJDIR}/%.o,$(src))
# OBJECT:=$(addprefix $(OBJDIR)/,$(src:.c=.o)) #reference to 6.3.1 Substitution References

all: hello_world

${OBJDIR}/%.o: %.c
	mkdir -p ${@D}
	$(CC) -c -o $@ $< $(CFLAGS)

hello_world: ${OBJECT}
	mkdir -p ${BINDIR}
	$(CC) -o ${BINDIR}/$@ $^ $(CFLAGS)
	@echo ======================
	@echo Build successfully
	@echo ======================
    	

.PHONY: clean
clean:
	rm -r ${OUTPUT_PATH}/ #remove output directory

	@echo ======================
	@echo clean successfully
	@echo ======================

# This command will execute when the Makefile is first read and parsed by make, 
# before any targets or recipes are executed. 
# It will create the directory specified by the "OBJDIR" variable if it does not already exist.

# $(shell mkdir -p $(OBJDIR))
# $(shell mkdir -p $(BINDIR))


	
	